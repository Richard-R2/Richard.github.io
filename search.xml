<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python - OpenCV - 截取视频某个时间点的一帧]]></title>
    <url>%2FPython-OpenCV-Snapshot.html</url>
    <content type="text"><![CDATA[1.起因最近在做一个短视频类的小程序，需要从用户上传的视频中截取封面图。因为有些用户喜欢用“名不副实”的封面来吸引人点进去，所以拟截取视频播放1秒时的一帧图片作为封面。 2.安装OpenCV库1pip install opencv-python 3.截取1秒时的一帧1234567891011121314151617import cv2video_path = "/home/richard/oss_tmp/a.mp4"cover_path = "/home/richard/oss_tmp/a_cover.jpg"try: vc = cv2.VideoCapture(video_path) # 读取视频 video_width = int(vc.get(cv2.CAP_PROP_FRAME_WIDTH)) # 视频宽度 video_height = int(vc.get(cv2.CAP_PROP_FRAME_HEIGHT)) # 视频高度 vc.set(cv2.CAP_PROP_POS_MSEC, 1000) # 设置读取位置，1000毫秒 rval, frame = vc.read() # 读取当前帧，rval用于判断读取是否成功 if rval: cv2.imwrite(cover_path, frame) # 将当前帧作为图片保存到 cover_path else: print("读取失败")except Exception as e: print(f"获取视频封面图失败: &#123;e&#125;")]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
        <tag>视频截图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub - 存储大文件]]></title>
    <url>%2FGitHub-Large-File-Storage.html</url>
    <content type="text"><![CDATA[问题的产生 我在GitHub上有一个仓库用来存放收集到的各种技术类书籍的电子版，但是众所周知GitHub默认情况下是不支持存储超过100M的单个文件的（其实超过50M时就会有Warning）。当我push比较大的PDF版的书籍（比如JavaScript-DOM编程艺术-中文第2版.pdf）时就会抛Error： 1remote: error: File xxx is 109.19 MB; this exceeds GitHub&apos;s file size limit of 100.00 MB 下面是使用Git大文件存储扩展LFS来使GitHub支持大文件的版本管理的步骤： 1.安装lfs1git lfs install 2.添加想要被托管的大文件 也可以直接添加一类文件，比如我的PDF文件 1git lfs track "*.pdf" 同时把仓库根目录下的.gitattributes也加入到git管理下 1git add .gitattributes 3. 正常提交 和正常的git提交命令一样 123git add file.pdfgit commit -m "Add new JS book"git push origin master 以上就是全部的步骤，下面是福利~ 福利 - 书架 &gt;&gt;传送门 - 我的书架&lt;&lt;有需要的同学可以下载下来，哦，最好是挑对自己有用书籍下载单个文件，因为整个仓库可能会有几十个G。]]></content>
      <categories>
        <category>GitHub教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - Super()继承顺序 - MRO顺序C3算法解析]]></title>
    <url>%2FPython-Super.html</url>
    <content type="text"><![CDATA[1.拓扑排序算法在解析MRO之前，需要先理解拓扑排序（Topological Sorting）算法 在图论中，当有向无环图（Directed Acyclic Graph,简称DAG）的所有顶点组成一个线性序列，且该序列满足以下条件：1.每个顶点出现且只出现一次；2.若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。则称该序列是此DAG的一个拓扑排序。 那么这个序列是如何得到的呢？ 1.选择一个入度为0（即只有出边没有入边）的顶点并输出；2.删除此顶点及所有出边。循环执行上面两步直到不存在入度为0的顶点为止，顶点输出的顺序即为拓扑排序。 用图比较容易理解： 拓扑排序得到的序列为：5 → 4 → 2 → 3 → 1 注意：在某些情况下拓扑排序可有多个结果 2.MRO - C3算法的工作原理 Python的Super()函数的方法解析顺序（Method Resolution Order, 简称MRO）使用的C3算法，可以理解为在拓扑排序算法的基础上考虑了基类出现的先后顺序。 C3算法的本质就是Merge，Merge规则如下：取第一序列的第一元素，与所有后续序列除第一元素外的所有元素进行比较。若不存在相同者，则取出这个元素并从全部序列中删除；若存在，则跳过此序列，取下一序列的第一元素往后进行相同的比较，直到可以取出某个元素并从全部序列中删除。然后回到最前面的序列，取第一元素进行下一轮循环比较，直到取出所有元素。取出的元素组成的列表即为mro列表。 之所以使用这个算法，是因为基于深度优先的搜索算法（见后文）不满足本地优先级和单调性的需求。本地优先级：指声明时父类的顺序，比如D(B,C)，则访问D类对象属性时，应该优先查找B，然后再查找C。单调性：如果在D的解析顺序中，B在C的前面，那么在D的所有子类里，也必须满足这个顺序。 试看以下代码 1234567891011121314class A(object): passclass B(A): passclass C(A): passclass D(B, C): passclass E(D, C): pass 假设X.mro = L(X), +为merge，则C3算法的过程为： L(E) = E + L(D) + L(C) + DCL(E) = E + [D+L(B)+L(C)+BC] + [C+L(A)+A] + DCL(E) = E + [D + [B+L(A)+A] + [C+L(A)+A] + BC] + [C+A+A] + DCL(E) = E + [D + BA + CA + BC] + CA + DCL(E) = E + DBCA + CA + DCL(E) = EDBCA 排序结果为：E → D → B → C → A → object 到此为止，基本可以理解MRO的排序算法的运算过程了。 3.如何直接查看某个类的继承顺序？每个类都有对应的mro属性和mro()方法： 12E.__mro__E.mro() 12(&lt;class &apos;__main__.E&apos;&gt;, &lt;class &apos;__main__.D&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;object&apos;&gt;)[&lt;class &apos;__main__.E&apos;&gt;, &lt;class &apos;__main__.D&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;object&apos;&gt;] 4.什么是深度优先算法？ 这是Python2.3之前的版本所使用的搜索算法，也是所有Python2.x版本中默认的经典类的搜索算法。 试看以下代码在2.2版本中的搜索结果： 1234567891011121314151617class A(): def foo(): print("in A")class B(A): # def foo(): # print("in B") passclass C(A): def foo(): print("in C")class D(B, C): passD().foo() 1in A 按照深度优先的原则: D → B → A → C，当B或A中有foo()方法时，根本轮不到去找C类中的foo()方法！ 为了解决这个问题，在Python2.3版本引入了新式类（使用C3算法），但是必须显式的声明继承自object才能生效。 123class A(object): pass··· Python3.x版本所有类默认为新式类，不必显式的声明。另：经典类中所有的特性都是可读可写的, 新式类中的特性只读的, 只能通过添加特性达到目的。 5.引申：介绍下广度优先算法 广度优先算法是优先查找距离最近的节点，即横向查找。则上面的代码排序结果为：D → B → C → A而使用第二部分的代码，排序结果为：E → D → C → B → A → object]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Super()继承顺序</tag>
        <tag>MRO</tag>
        <tag>C3算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 数组切片、更新、排序]]></title>
    <url>%2FPython-List-Slice.html</url>
    <content type="text"><![CDATA[1.数组切片12345678910111213141516171819202122232425l = [1, 2, 3, 4, 5, 6, 7, 8, 9]l[:] # 所有元素 # [1, 2, 3, 4, 5, 6, 7, 8, 9]l[0] # 第一个元素# 1l[1:3] # 第2~4个元素，不包括第4个# [2, 3]l[3:] # 第4~最后一个元素# [4, 5, 6, 7, 8, 9]l[:3] # 第1~4个元素，不包括第4个# [1, 2, 3]l[:-1] # 第1~最后一个元素，不包括最后一个# [1, 2, 3, 4, 5, 6, 7, 8]l[2:-1:2] # 从第3~最后一个元素中每隔2个步长取一个，不包括最后一个元素# [3, 5, 7]l[::3] # 每隔3个步长取一个元素# [1, 4, 7] 2.数组更新12345678910111213141516171819202122232425l = [1, 2, 3, 4, 5, 6, 7, 8, 9]l.append(0) # 列表最后追加一个元素0# [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]l.extend([0, 0]) # 列表后面追加另一个列表# [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]l.insert(1, '0') # 在第1个元素的位置插入字符串'0'# [1, '0', 2, 3, 4, 5, 6, 7, 8, 9]l[1:3] = [0] # 用0替换第2~4个元素，不包括第4个# [1, 0, 4, 5, 6, 7, 8, 9]l[-2:] = [0, 0, 0, 0] # 将最后两个元素替换为四个0# [1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0]l.pop() # 弹出最后一个元素,返回该元素的值# [1, 2, 3, 4, 5, 6, 7, 8]l.pop(0) # 弹出第一个元素，返回该元素的值# [2, 3, 4, 5, 6, 7, 8, 9]del l[0] # 删除第一个元素# [2, 3, 4, 5, 6, 7, 8, 9] 3.数组排序1234567891011121314151617181920212223242526272829l = [1, 2, 3, 4, 5, 6, 7, 8, -9]l.reverse() # l反向# [-9, 8, 7, 6, 5, 4, 3, 2, 1]list(reversed(l)) # l反向,与l.reverse()的区别：后者直接作用于l，返回None，前者返回一个迭代器l.sort() # 对l进行排序, 默认从小到大，升序# [-9, 1, 2, 3, 4, 5, 6, 7, 8]sorted(l) # 升序排序，与l.sort()的区别：后者直接作用于l，返回None，前者返回一个新的列表# [-9, 1, 2, 3, 4, 5, 6, 7, 8]l.sort(reverse=True) # 对l进行从大到小排序，降序，可与key参数搭配灵活使用# [8, 7, 6, 5, 4, 3, 2, 1, -9]l.sort(key=lambda x: abs(x)) # 按指定的方法进行排序，一般与lambda临时函数配合使用，也可以使用自定义方法如：def my_f(x): return abs(x) # 取绝对值l.sort(key=my_f) # 按自定义方法进行排序l = [(1,2), (-4,3), (6,0)]l.sort(key=lambda x: x[1]) # 按子元组的第二个元素大小升序排列# [(6,0), (1,2), (-4,3)]l.sort(key=lambda x: abs(x[0]), reverse=True) # 按第一个元素的绝对值大小降序排列# [(6,0), (-4,3), (1,2)] 4.其他数组操作12345678910[1, 2] * 4 # [1,2]重复4次# [1, 2, 1, 2, 1, 2, 1, 2]l = [1, 2, 3, 4, 5, 6, 5, 8, 8]l.count(8) # 统计8出现的次数# 2l.index(5) # 找到5第一次出现的位置索引值(列表中没有5的话会报错ValueError)# 4]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数组</tag>
        <tag>数组切片</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 浅拷贝和深拷贝解析]]></title>
    <url>%2FPython-Copy-Deepcopy.html</url>
    <content type="text"><![CDATA[1.浅拷贝和深拷贝的区别 浅拷贝(copy)：仅拷贝对象，但不拷贝此对象内的子对象。深拷贝(deepcopy)：完全拷贝对象，包括其内部的子对象。 2.举例理解12345678910111213# -*- coding:utf-8 -*-import copya = &#123;0:1, 1:[1,2]&#125;a1 = copy.copy(a) # 浅拷贝a2 = copy.deepcopy(a) # 深拷贝a[1].append(3)print(a, '%x' % id(a), '%x' % id(a[1])) # 使用16进制格式化输出id值print(a1, '%x' % id(a1), '%x' % id(a1[1]))print(a2, '%x' % id(a2), '%x' % id(a2[1])) 1234输出结果：&#123;0: 1, 1: [1, 2, 3]&#125; 220a8caf2d0 220aa969e08&#123;0: 1, 1: [1, 2, 3]&#125; 220a8caf318 220aa969e08&#123;0: 1, 1: [1, 2]&#125; 220aa937c18 220aa969ec8 从输出结果进行分析：1.a、a1、a2三者的id值不同。说明不论深浅拷贝都能得到新的对象。2.a1[1]和a[1]的id值相同，a2[1]和a[1]的id值不同。说明浅拷贝不能拷贝子对象，执行浅拷贝得到的对象a1的子对象和原对象a的子对象使用的是相同的一块内存，但是执行深拷贝得到的对象a2却和原对象a完全独立。这也是为什么当a[1].append(3)后，a1[1]也跟着变了，而a2[1]却没变。 3.a.copy()和copy.copy(a)的区别 虽然两者都是浅拷贝，但是copy.copy()能够拷贝的对象更多，即某些对象本身是没有copy属性的，比如元组(tuple)。如果将上例中的a值替换为a = (1, [1,2])，那么执行a1 = a.copy()时是会报错的： 1234# -*- coding:utf-8 -*-a = (1, [1,2])a1 = a.copy() 1AttributeError: &apos;tuple&apos; object has no attribute &apos;copy&apos; 4.手写字典深拷贝123456789def deep_copy(x): '''仅适用于子对象是字典的情况''' x1 = &#123;&#125; for k, v in x.items(): if isinstance(v, dict): # 当子对象是字典类型时递归执行 x1[k] = deep_copy(v) else: x1[k] = v return x1 如果子对象是数组或者元组的话，只要在赋值前价格数据类型判断，然后根据不同的类型赋值给不同的变量即可兼容。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>浅拷贝和深拷贝</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 装饰器]]></title>
    <url>%2FPython-Decorator.html</url>
    <content type="text"><![CDATA[1.装饰器的概念 装饰器(decorator):装饰器是一种闭包的使用，要理解装饰器的原理必须先理解python闭包的概念。 关于闭包的知识可以参考&gt;&gt;传送门 - Python闭包&lt;&lt;。 2.举例理解1234567891011121314151617181920212223242526# -*- coding: utf-8 -*-def deco(func): print("deco") def inner_deco(*args): # 调用的enclosing作用域中的对象，inner_deco函数就是个闭包 print("inner_deco") for a in args: if not isinstance(a, int): # 参数检查语句 return 0 return func(*args) # 调用了enclosing作用域的func，所以func会被加入到inner_deco的__closure__属性中 return inner_deco@deco # 语法糖，就相当于func_sum = deco(func_sum)，此时func_sum就指向了inner_deco。可以理解为func_sum被deco装饰后变成了inner_decodef func_sum(*args): print("func_sum") return sum(args)@decodef func_min(*args): print("func_min") return min(args)# func_sum = deco(func_sum)print(func_sum(1,2,'3'))print(func_min(4,5,6)) 12345678运行结果：decodecoinner_deco0inner_decofunc_min4 @deco只是一种语法糖写法之所以打印结果中没有输出：”func_sum”，是因为在执行参数检查语句时return 0了。 3.知识点3.1 装饰器在何时生效？ 在main函数之前，import时就生效了。因为@deco就相当于func_sum = deco(func_sum)，是写在最外面的。如果把上述例子中最后的两个print语句注释掉的话，执行结果将会是： 12decodeco 3.2 装饰器能不能返回别的函数？ 当然可以，这样就可以修改函数的功能了。即被装饰的函数的功能取决于inner_deco返回的是哪个函数。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>装饰器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 闭包]]></title>
    <url>%2FPython-Closure.html</url>
    <content type="text"><![CDATA[1.闭包的概念 闭包(closure):内部函数中对enclosing作用域中的变量进行引用，这个内部函数就称为闭包。 关于enclosing作用域相关的知识可以参考&gt;&gt;传送门 - Python函数作用域&lt;&lt;。 2.举例解释 首先要理解python中的函数也是一个对象，它是有属性和返回值的，而在函数执行完后其内部变量会被解释器回收。 12345678910111213141516171819# Gpass_line = 60def func(score): # E print("%x" % id(score)) # 以16进制打印score的id值 pass_line = 90 result = "yes" if score &gt;= pass_line else "no" print(result) def inner_func(): # score在E作用域中，inner_func就是个闭包, 有__closure__属性 # L print(score) print(inner_func.__closure__) return inner_funcf = func(80) # 语句1 func()返回了一个函数对象inner_funcf() # 语句2 此时f即inner_funcprint(f.__closure__) 123456运行结果：6e7e6ac0no(&lt;cell at 0x000001FC0B9AB6A8: int object at 0x000000006E7E6AC0&gt;,)80(&lt;cell at 0x0000019CDFBDB6A8: int object at 0x000000006E7E6AC0&gt;,) 两个本来语句1运行完之后，func内部的变量都已经被回收了，那么这个 80为什么还可以被语句2打印出来呢？注意下这个现象f.__closure__这个元组的第一个元素的id和score变量的id值相同。说明如果内部函数中对enclosing作用域中的变量进行引用之后，这个变量就会被添加到inner_func的__closure__属性这个元组中，这样因为有了这个添加到元组的引用，score变量就不会被回收了，再调用f函数时，就会在它的__closure__属性中查找score变量，这样就自然而然的可以引用了。 理解了这个例子就可以搞懂Python的闭包了。 3.一个简单的应用 下面的代码就是应用闭包达到了自定pass_line的目的 1234567891011def func(pass_line): def inner_func(score): # score在E作用域中，inner_func就是个闭包, 有__closure__属性 result = "yes" if score &gt;= pass_line else "no" # 此时引用了enclosing作用域中的pass_line，那么pass_line变量就被添加到了__closure__属性中 print(result) return inner_funcf = func(90) # 语句1 func()返回了一个函数对象inner_funcf(80) # 语句2 此时f即inner_funcf2 = func(60)f2(80) 123运行结果：noyes 4.经典错误代码 参考&gt;&gt;传送门 - 闭包经典错误代码&lt;&lt; 123456789def foo(): a = 1 def bar(): a = a + 1 return a return barc = foo()c() 12会报错如下：local variable &apos;a&apos; referenced before assignment 这是因为在执行代码 c = foo()时，python会导入全部的闭包函数体bar()来分析其的局部变量，python规则指定所有在赋值语句左面的变量都是局部变量，则在闭包bar()中，变量a在赋值符号”=”的左面，被python认为是bar()中的局部变量。再接下来执行print c()时，程序运行至a = a + 1时，因为先前已经把a归为bar()中的局部变量，所以python会在bar()中去找在赋值语句右面的a的值，结果找不到，就会报错。解决的方法很简单: 123456def foo(): a = [1] def bar(): a[0] = a[0] + 1 return a[0] return bar 只要将a设定为一个容器就可以了。这样使用起来多少有点不爽，所以在python3以后，在a = a + 1 之前，使用语句nonloacal a就可以了，该语句显式的指定a不是闭包的局部变量。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>闭包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - 函数作用域]]></title>
    <url>%2FPython-Function-Scope.html</url>
    <content type="text"><![CDATA[1.函数作用域 L：local 函数内部作用域； E：enclosing 函数内部与它的内嵌函数之间； G：global 全局作用域，在同一个.py文件最外层； B：build-in 解释器内置作用域。 2.对象查找顺序 L &gt; E &gt; G &gt; B 3.举例解释12345678910111213141516171819202122# -*- conding: utf-8 -*-# Gpass_line = 60 def func(score): # E pass_line = 90 result = "yes" if score &gt;= pass_line else "no" print(result) def inner_func(): # L # score = 81 print(score) inner_func() print(max(1,2)) # Bfunc(80)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>函数作用域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux开机启动项目录rc.d]]></title>
    <url>%2FLinux-Msconfig.html</url>
    <content type="text"><![CDATA[本文以/init.d/redis-server-2脚本为例，介绍如何自定义开机启动项。 /etc/init.d目录下是所有的启动脚本，我们可以通过以下命令来运行。 1/etc/init.d/脚本名 参数 1.先查看下自己的开机启动级别1Runlevel 显示 N 2则当前的级别是2级,那么所有开机启动项就是在/etc/rc2.d目录下。 2.查看下原来的redis启动序号1ls -l /etc/rc2.d 这个目录下都是软链接（符号链接），链接到/etc/init.d目录。显示格式如下：S/K + 序号 + 脚本名 12lrwxrwxrwx 1 root root 22 Dec 2 15:37 S20redis-server -&gt; ../init.d/redis-serverlrwxrwxrwx 1 root root 18 Aug 24 2017 S99rc.local -&gt; ../init.d/rc.local 启动序号是20S开头是开机时的脚本启动顺序，按序号从小到大启动。K开头表示是关机时的脚本关闭顺序，按序号从大到小关闭。 3.将启动脚本软链接到开机启动目录下1ln -s /etc/init.d/redis-server-2 /etc/rc2.d/S20redis-server-2 注意：如果两个redis有主从关系的话即需要有先后启动顺序，就需要适当的增大序号，如21 1ln -s /etc/init.d/redis-server-2 /etc/rc2.d/S21redis-server-2 *也可以使用update-rc.d命令，效果相同： 1update-rc.d -f redis-server-2 defaults 20 4.取消开机启动 方法一：使用update-rc.d命令 1update-rc.d -f redis-server-slark remove 方法二：直接删除软链接 1rm -f /etc/rc2.d/S20redis-server-slark 5.关于rc.local rc.local也是开机启动脚本，从ls -l /etc/rc2.d 命令的输出结果也可以看出，它的启动序号是99。所以rc.local里的内容是在所有更高级别的初始化脚本(rc1.d rc2.d …)运行之后再执行的。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器配置 - Redis单机多实例配置]]></title>
    <url>%2FServer-Redis-Multi-Instance.html</url>
    <content type="text"><![CDATA[1.拷贝配置文件 可以参考&gt;&gt;传送门 - Redis安装配置&lt;&lt;。Redis安装时会生成一份默认配置/etc/redis/redis.conf，几个常用配置项如下： 1vim /etc/redis/redis.conf 1234567891011121314151617181920# 端口port 6379# pid文件路径pidfile /var/run/redis/redis-server.pid# 绑定ipbind 139.xxx.xxx.xxx 127.0.0.1# 登录需要密码requirepass 123456# log文件路径logfile /var/log/redis/redis-server.log# 持久化输出的数据库文件dbfilename dump.rdb# 只增文件的文件名称appendfilename &quot;appendonly.aof&quot; 将配置文件拷贝一份，并修改下内容： 12cp /etc/redis/redis.conf /etc/redis/redis-2.confvim /etc/redis/redis-2.conf 1234567891011121314151617181920# 端口port 6789# pid文件路径pidfile /var/run/redis/redis-2.pid# 绑定ipbind 139.xxx.xxx.xxx 127.0.0.1# 登录需要密码requirepass 123456# log文件路径logfile /var/log/redis/redis-2.log# 持久化输出的数据库文件dbfilename dump-2.rdb# 只增文件的文件名称appendfilename &quot;appendonly-2.aof&quot; 2.手动启动 从不同的配置文件启动Redis实例 12redis-server /etc/redis/redis.confredis-server /etc/redis/redis-2.conf 到这里两个实例都可以正常工作了。 *3.主从配置 一些场景下需要配置Redis主从数据库，如读写分离。Redis的主从配置还是很容易的，只要修改下从库的配置文件的slaveof项即可。 1vim /etc/redis/redis-2.conf 12# 从属关系，如果是在同一台机器上可以把ip设置为127.0.0.1slaveof 139.xxx.xxx.xxx 6379 *4.设置开机启动 默认情况下只有第一个实例会开机启动，其他的实例需要手动启动，下面将讲解如何让第二个实例也开机启动。 4.1.先拷贝一份原来的启动脚本1cp /etc/init.d/redis-server /etc/init.d/redis-server-2 4.2.修改新的启动脚本1vim /etc/init.d/redis-server-2 前几行需要修改的内容如下： 12345678PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binDAEMON=/usr/bin/redis-serverDAEMON_ARGS=/etc/redis/redis-2.confNAME=redis-server-2DESC=redis-server-2RUNDIR=/var/run/redisPIDFILE=$RUNDIR/redis-server-2.pid *以后就可以使用下面的命令来启动/停止新的实例了 12/etc/init.d/redis-server-2 start # 启动/etc/init.d/redis-server-2 stop # 停止 4.3.将新脚本加入开机启动项 方法一：使用update-rc.d命令，20是想要指定的启动序号。 1update-rc.d -f redis-server-2 defaults 20 方法二：手动添加开机启动项，可以参考这篇文章&gt;&gt;传送门 - Linux设置开机启动项&lt;&lt;，两个方法的结果是相同的。 配置完成，此时敲reboot重启机器就可以实现开机自动启动这两个实例了。 *4.4.取消开机启动1update-rc.d -f redis-server-2 remove]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - Supervisor安装配置]]></title>
    <url>%2FServer-Supervisor-Configuration.html</url>
    <content type="text"><![CDATA[1.安装1pip install supervisor 2.初始化启动配置文件12echo_supervisord_conf &gt; /etc/supervisord.confvim /etc/supervisord.conf 最后面加上下面这两行内容，这样就可以从/etc/supervisor目录下自动加载所有的conf文件了。 12[include]files = /etc/supervisor/*.conf 3.新建项目配置文件123mkdir /var/log/supervisormkdir /etc/supervisorvim /etc/supervisor/happydev.conf 内容如下： 12345678910111213[program:happydev]directory = /var/www/happydev ;command = /var/www/happydev/venv/bin/gunicorn -w4 -b127.0.0.1:8003 --timeout 120 happy:app ;autostart = true ;startsecs = 5 ;autorestart = true ;startretries = 3 ;user = root ;redirect_stderr = true ;stdout_logfile_maxbytes = 100MB ;stdout_logfile_backups = 10 ;stdout_logfile = /var/log/supervisor/happydev.log ;environment = HAPPY_CONFIG_FILE=&quot;/var/www/happydev/happy/config/staging.py&quot;,HAPPY_PATH=&quot;/var/www/happydev&quot; ; 这里管理的进程是使用gunicorn启动的Flask项目，关于gunicorn的使用可以参考&gt;&gt;传送门 - Gunicorn安装配置&lt;&lt;。 4.启动suprervisord1supervisord -c /etc/supervisord.conf 到这一步supervisor已经正常工作了。 5.常用命令5.1.停止supervisor主进程 查看supervisord进程号(pid)： 1ps aux | grep supervisord 关闭进程： 1kill [pid] 5.2.启动单个项目进程1supervisorctl start happydev 5.3.停止单个项目进程1supervisorctl stop happydev 注意：使用此命令停止的进程不会被自动重启机制重新启动 5.4.重启单个项目进程1supervisorctl restart happydev 5.5.重新加载单个项目123supervisorctl remove happydev # 移除happydev项目supervisorctl reread # 重新读取所有配置文件supervisorctl add happydev # 添加happydev项目 5.6.查看所有项目进程的运行状态1supervisorctl status]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>服务器</tag>
        <tag>Supervisor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - Gunicorn安装配置]]></title>
    <url>%2FServer-Gunicorn-Configuration.html</url>
    <content type="text"><![CDATA[1.安装123cd /var/www/happy # 进入项目代码目录source venv/bin/activate # 激活并进入虚拟环境pip install gunicorn # 在虚拟环境中安装gunicorn 2.使用gunicorn启动Flask项目1gunicorn -w4 -b127.0.0.1:8003 happy:app 这里的happy是Flask项目的app名-w4 等同于 –workers=4，意为同时启动四个worker-b127.0.0.1:8003 等同于 –bind=127.0.0.1:8003，用于指定绑定的服务器ip和端口 3.关闭进程 Ctrl+C即可。 后台进程可以使用以下命令查看进程号(pid): 1ps -ef | grep gunicorn 关闭进程命令： 1kill [pid] 推荐使用supervisor来管理gunicorn进程，优点是启动、停止、重启都很方便，并且支持自动重启被意外停止的进程，可以参考&gt;&gt;传送门 - Supervisor安装配置&lt;&lt;。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Python</tag>
        <tag>服务器</tag>
        <tag>Gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python - virtualenv虚拟环境配置]]></title>
    <url>%2FPython-Virtualenv.html</url>
    <content type="text"><![CDATA[1.安装1pip install virtualenv 2.创建虚拟环境123git clone git@github.com:RichardRenn/happy.git /var/www/happy # 克隆项目代码cd /var/www/happy # 进入项目目录virtualenv venv # 创建虚拟环境目录./venv 3.激活并进入虚拟环境1source ./venv/bin/activate 当看到命令行前面显示(venv)标志时即表示已进入虚拟环境 4.安装需求库 同在普通环境下的安装命令是相同的，只不过所有的库都会被安装到虚拟环境目录下 1pip install [module-name] *也可以从需求库依赖文件安装所需库 1pip install -r requirements.txt 需求库依赖文件可以从任何一个虚拟环境中导出，导出命令如下： 1pip freeze &gt; requirements.txt 推荐保持依赖文件为最新状态，并存放在项目代码目录下，可以很方便地在新机器上安装部署项目虚拟环境。 5.退出虚拟环境1deactivate]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器配置 - Nginx安装配置]]></title>
    <url>%2FServer-Nginx-Configuration.html</url>
    <content type="text"><![CDATA[1.安装1apt-get install nginx 2.增加代理配置12cd /etc/nginx/sites-availablevim your_site_name 普通http配置参考： 12345678910111213# http serverserver &#123; listen 80; server_name your.site.name.cn; # ssl on; access_log /var/log/nginx/syour_site_name.access.log; error_log /var/log/nginx/your_site_name.error.log; location / &#123; proxy_pass http://127.0.0.1:8011; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forward_For $proxy_add_x_forwarded_for; &#125; 安全https配置参考： 12345678910111213141516171819# HTTPS serverserver &#123; listen 443; listen [::]:443 ipv6only=on; server_name your.site.name.cn; ssl on; access_log /var/log/nginx/your_site_name.access.log; error_log /var/log/nginx/your_site_name.error.log; ssl_certificate /path/to/your/https/cert/your_site_name.pem; ssl_certificate_key /path/to/your/https/cert/your_site_name.key; ssl_session_timeout 5m; location / &#123; proxy_pass http://127.0.0.1:8012; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forward_For $proxy_add_x_forwarded_for; &#125;&#125; 将文件链接至sites-enabled目录下。 1ln -s /etc/nginx/sites-available/your_site_name /etc/nginx/sites-enabled/your_site_name *这是因为sites-available目录下存放的只是备选配置，sites-enabled目录下才是真正有效的代理设置。 3.Nginx配置1vim /etc/nginx/nginx.conf 修改下前几行内容: 123456789user www-data;worker_processes 4; # worker数worker_rlimit_nofile 60000; pid /run/nginx.pid;events &#123; worker_connections 65535; # 最大同时连接数 multi_accept on; # 开启接受同时连接选项&#125; 4.重载配置1/usr/sbin/nginx -s reload 这一步做完Nginx已经可以正常工作了。 5.常用命令5.1.启动1/usr/sbin/nginx 5.2.停止1/usr/sbin/nginx -s stop 5.3.验证配置文件是否正确1/usr/sbin/nginx -t]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器配置 - Redis安装配置]]></title>
    <url>%2FServer-Redis-Configuration.html</url>
    <content type="text"><![CDATA[1.安装1apt-get install redis-server 2.配置1vim /etc/redis/redis.conf 这里仅介绍几个基本配置 1234567891011121314151617181920# 端口port 6379# pid文件路径pidfile /var/run/redis/redis-server.pid# 绑定ipbind 139.xxx.xxx.xxx 127.0.0.1# 登录需要密码requirepass 123456# log文件路径logfile /var/log/redis/redis-server.log# 持久化输出的数据库文件dbfilename dump.rdb# 只增文件的文件名称appendfilename &quot;appendonly.aof&quot; 3.重启1/etc/init.d/redis-server restart 这一步做完redis-server已经可以正常工作了。 4.常用命令4.1.连接1redis-cli -h 139.xxx.xxx.xxx -p 6379 -a 123456 如果是本地连接的话-h参数可以省略使用默认端口6379的话-p参数可以省略没有设置密码的话-a参数可以省略 4.2.关闭1redis-cli shutdown 4.2.启动服务器1redis-server 在一台机器上配置多个Redis服务器可以参考&gt;&gt;传送门 - Redis单机多实例配置&lt;&lt;。]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器配置 - Nginx+Gunicorn+Supervisor+Flask]]></title>
    <url>%2FServer-Configuration.html</url>
    <content type="text"><![CDATA[1.为服务器添加ssh公钥验证2.Git安装配置3.Redis安装配置4.Nginx安装配置5.配置Python虚拟环境6.Gunicorn安装配置7.Supervisor安装配置]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器搭建 - 为服务器添加ssh公钥验证]]></title>
    <url>%2FServer-SSH-Key.html</url>
    <content type="text"><![CDATA[1.生成密钥对 在本地运行如下命令： 1ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 如果不想设置密码的话直接三次回车即可，和git生成密钥的命令相同。 生成的密钥对位置在 ~/.ssh，查看下公钥，下一步要用到。 1cat ~/.ssh/id_rsa.pub 内容类似下面这样 1ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC+am2s/r1n+xsipi/4H2ll8p3McdhQCLBwJGNbkaxpeWKtdbiUbqAWeNt/OF13VsyWLs5lb6J2I3J6GlCcEGMGOFc4gzLTP9e/TmXeyFlBMZkuSJTbsXvL9Q/tff/8Tgt4aVAeOAgSd2jdDEvALegap4nrMHVLP8sOQlNFBMPjy1r0cW/Afp32gCtPOpQRuIkQdOnWUkzjObGanhYnX470UNsvgQ+IyikhS5tiKPqkT317v6yFV4doeZgfNYtcgpLVZcVxkItTLS1h75d4h4MD2JVRk2nBGSLp5j2WIji4Tiy++LblV1Y5Y2wRcfefdXCIMT3jMNAcyhuCaNfaD/Q== your_email@example.com 2.添加到服务器123ssh root@server_ip # 登陆服务器mkdir .ssh # 创建.ssh目录vim .ssh/authorized_keys # 创建已验证的密钥记录文件 在vim编辑器中按i键，把上一步的公钥拷贝进来，多个公钥的话换行隔开即可。然后按ESC键退出编辑模式，输入:wq回车即可保存文件。这样以后输入ssh root@ip命令就可以不用输入密码直接进去了。 3.更快捷地登陆完成上面的配置后，还可以通过对本地ssh进行配置以进一步简化登陆操作。 在本地打开~/.ssh/config 文件 1vim ~/.ssh/config 添加如下配置内容: 1234Host happyHostname 139.xxx.xxx.xxxUser rootIdentityFile ~/.ssh/id_rsa 以后在本地直接输入以下命令就可登陆远程服务器 1ssh happy 多个服务器配置只需换行隔开即可。]]></content>
      <categories>
        <category>服务器搭建</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub教程 - 分支工作流程]]></title>
    <url>%2FGitHub-Branch-Workflow.html</url>
    <content type="text"><![CDATA[1.更新代码 进入代码目录，更新代码 123cd ~/workspace/sourcecode/richardrenn/slarkgit pull origin master*git pull upstream master *查看所有远端库情况 1git remote -v 1234origin git@github.com:RichardRenn/slark.git (fetch)origin git@github.com:RichardRenn/slark.git (push)upstream git@github.com:southflower/slark.git (fetch)upstream git@github.com:southflower/slark.git (push) *查看所有分支情况，可看到当前的分支是origin/master 1git branch -a 123456* master remotes/origin/HEAD -&gt; origin/master remotes/origin/master remotes/origin/release remotes/upstream/master remotes/upstream/release 2.新建分支 本地新建分支，并切换到新建的分支 1git checkout -b dev 3.推送分支 推送新分支到远端库和上游库，冒号前的是本地分支名，冒号后的是远程分支名 12git push origin dev:devgit push upstream dev:dev 此时再敲git branch -a 就可以看到已经在远端库和上游库都建好了分支 123456789* dev master remotes/origin/HEAD -&gt; origin/master remotes/origin/dev remotes/origin/master remotes/origin/release remotes/upstream/dev remotes/upstream/master remotes/upstream/release 4.提交修改 在本地的dev分支修改文件并提交推送到远端库 1234git add [file]git commit -m "something"git push origin dev*git push upstream dev # 这一步直接推送到上游库的dev分支，可以省一次PR 5.提交PR 在网页通过PR的方式将dev代码推送到上游库的dev分支 6.分支合入 等dev调试稳定后再通过PR的方式将上游库的dev分支merge到其master分支，即可上线 PR操作可以参考&gt;&gt;传送门 - Pull Request 工作流程&lt;&lt;]]></content>
      <categories>
        <category>GitHub教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub教程 - Pull Request 工作流程]]></title>
    <url>%2FGitHub-Pull-Request-Workflow.html</url>
    <content type="text"><![CDATA[1.Fork仓库 先在github上将源仓库fork到自己的仓库 12源仓库：git@github.com:southflower/slark.gitfork后：git@github.com:RichardRenn/slark.git 2.检出代码 在本地检出fork后的仓库代码 12cd ~/workspace/sourcecode/richardrenngit clone git@github.com:RichardRenn/slark.git ./slark 3.关联上游源仓库 进入代码目录，加入上游源仓库关联 12cd ./slarkgit remote add upstream git@github.com:southflower/slark.git 4.更新代码 更新源仓库代码到本地仓库 12git fetch upstreamgit merge upstream/master 5.提交代码 在本地仓库中，修改代码后提交到自己的远端仓库 123git add .git commit -m "anything"git push origin master 6.提交PR 在github网页上提交PR在自己的仓库界面点击”New Pull Request” 7.PR合入 然后待源仓库的作者将你的PR合入即可 带分支的工作方式可以参考&gt;&gt;传送门 - 分支工作流程&lt;&lt;]]></content>
      <categories>
        <category>GitHub教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub教程 - Git安装配置]]></title>
    <url>%2FGit-Configuration.html</url>
    <content type="text"><![CDATA[*1.环境变量1vim ~/.bashrc 在后面添加以下内容,以解决某些包(如perl、git)安装时的warning 12export LC_ALL="C"export LANGUAGE="zh_CN:zh" 当然也可以直接在命令终端中export临时设置环境变量 2.安装123apt-get install git # 这是Ubuntu下的命令yum install git # 这是CentOS下的命令brew install git # 这是MAC下的命令 3.生成ssh密钥对1ssh-keygen -t rsa -b 4096 -C "your_email@example.com" 如果不想设置密码的话直接三次回车即可，和git生成密钥的命令相同。 生成的密钥对位置在 ~/.ssh，查看下公钥，后面要用到。 1cat ~/.ssh/id_rsa.pub 内容类似下面这样 1ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC+am2s/r1n+xsipi/4H2ll8p3McdhQCLBwJGNbkaxpeWKtdbiUbqAWjHS436eNt/OF13VsyWLs5lb6J2I3J6GlCcEGMGOFc4gzLTP9e/TmXeyFlBMZkuSJTbsXvL9Q/tff/8Tgt4aVwR3OWlwfvPdtoyR0tGhDDQn8a0gzs04mPyMWjK6akt/zGCQ70Eo6stVMGCyMAL/PrHwdZ/puXjtw0T9HSs/ON/Jub+h3oKfgJVhpJNbIDR2r08LoEA0roTplI4aSR+JgnSKsXhIvTAUm+VRmWgz3oPYcNkaGkvBvA1gfk/baB6qxv0hkjPwtY5GIRkCU6cIcjG3U1LR6pnH+8Z0RbN9YaFFNRRf4rMnZ3n0jhYXCq7dzBoofLWRVlAqTlybF7xz9JNVQxiC+o5skBHJ/Eb7Ggtejc6TVW+FJaNUy5+yWqfhq57kC4zq+5HhAY9ToKZpYLKjJa7oG0eHAeOAgSd2jdDEvALegap4nrMHVLP8sOQlNFBMPjy1r0cW/Afp32gCtPOpQRuIkQdOnWUkzjObGTLaVffanhYnX470UNsvgQ+IyikhS5tiKPqkT317v6yFV4doeZgfNYtcgpLVZcVxkItTLS1h75d4h4MD2JVRk2nBGSLp5j2WIji4Tiy++LblV1Y5Y2wRcfefdXCIMT3jMNAcyhuCaNfaD/Q== your_email@example.com 4.公钥添加到GitHub&gt;&gt;传送门 - 添加你自己的公钥&lt;&lt; 将上一步的公钥拷贝下来，粘贴至GitHub网页以下位置 5.配置用户名和邮箱12git config --global user.name "your_name"git config --global user.email "your_email@example.com" 6.克隆代码1git clone git@github.com:user_name/project_name.git /path/to/your/sourcecode]]></content>
      <categories>
        <category>GitHub教程</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[博客访问地址 - Coding博客访问地址 - Github博客访问地址 - Gitee]]></content>
  </entry>
</search>
